<!DOCTYPE html>
<html lang=en>

<head>
  <title>Learning IndexedDB</title>
</head>

<body>

  REF: https://www.freecodecamp.org/news/a-quick-but-complete-guide-to-indexeddb-25f030425501/
  IndexDB - A database is private to a domain, so any other site cannot access another website IndexedDB stores.

  Web Storage Overview REF: https://web.dev/storage-for-the-web/

  Here's a general recommendation for storing resources:

  For the network resources necessary to load your app and file-based content, use the Cache Storage API (part of
  service workers).
  For other data, use IndexedDB (with a promises wrapper).
  IndexedDB and the Cache Storage API are supported in every modern browser. They're both asynchronous, and will not
  block the main thread. They're accessible from the window object, web workers, and service workers, making it easy to
  use them anywhere in your code.

  Other storage mechanisms

  SessionStorage - use with caution because it is synchronous and will block the main thread.
  It is limited to about 5MB and can contain only strings.
  It is tab specific, it is not accessible from web workers or service workers.

  LocalStorage - avoid because it is synchronous and will block the main thread.
  It is limited to about 5MB and can contain only strings.
  ocalStorage is not accessible from web workers or service workers.

  Cookies - not be used for storage.
  Limited to only strings
  Cookies are sent with every HTTP request, so storing anything more than a small amount of data will significantly
  ncrease the size of every web request.
  They are synchronous, and are not accessible from web workers.
  Like LocalStorage and SessionStorage, cookies are limited to only strings.

  The File System API and FileWriter API provide methods for reading and writing files to a sandboxed file system.
  While it is asynchronous, it is not recommended because it is only available in Chromium-based browsers.

  The Native File System API was designed to make it easy for users to read and edit files on their local file system.
  The user must grant permission before a page can read or write to any local file, and permissions are not persisted
  across sessions.

  WebSQL - not be used, and existing usage should be migrated to IndexedDB.
  Support has been removed from almost all major browsers.
  The W3C stopped maintaining the Web SQL spec in 2010, with no plans to further updates planned.

  Application Cache - not be used, and existing usage should be migrated to service workers and the Cache API.
  It has been deprecated and support will be removed from browsers in the future.

  How much can I store?
  At least a couple of hundred megabytes, and potentially hundreds of gigabytes or more.
  The amount of storage available is usually based on the amount of storage available on the device.

  Chrome allows the browser to use up to 60% of total disk space.
  Use the StorageManager API to determine the maximum quota available.
  Other Chromium-based browsers may allow the browser to use more storage.
  Internet Explorer 10 and later can store up to 250MB and will prompt the user when more than 10MB has been used.
  Firefox allows an origin to use up to 2GB. You can use the StorageManager API to determine how much space is still
  available.
  Safari (both desktop and mobile) appears to allow up to 1GB.
  When the limit is reached, Safari will prompt the user, increasing the limit in 200MB increments - NOT VERIFIED.

  How to handle going over quota?
  Both IndexedDB and the Cache API both throw a DOMError named QuotaExceededError when you've exceeded the quota
  available.
  Always catch and handle write errors, whether it's a QuotaExceededError or something else.
  E.G. for IndexedDB
  const transaction = idb.transaction(['entries'], 'readwrite');
  // transaction's onabort() handler will be called, passing an event
  transaction.onabort = function(event) {
  // The event will include a DOMException in the error property
  const error = event.target.error; // DOMException
  // Checking the error name will return QuotaExceededError
  if (error.name == 'QuotaExceededError') {
  // Fallback code goes here
  }
  };


  E.G. for Cache API
  try {
  const cache = await caches.open('my-cache');
  await cache.add(new Request('/sample1.jpg'));
  } catch (err) {
  if (error.name === 'QuotaExceededError') {
  // Fallback code goes here
  }
  }

  How does eviction work? REF: https://web.dev/storage-for-the-web/#eviction

  *************Use a wrapper for IndexedDB**************
  IndexedDB is a low level API that requires significant setup before use, which can be particularly painful for storing
  simple data.
  Unlike most modern promise-based APIs, it is event based.
  Promise wrappers like idb for IndexedDB hide some of the powerful features
  but more importantly, hide the complex machinery (e.g. transactions, schema versioning) that comes with the IndexedDB
  library.


</body>

</html>